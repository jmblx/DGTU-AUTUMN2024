"""Add achievement_reward and event_reward tables

Revision ID: e2447e5315c7
Revises: 
Create Date: 2024-10-27 00:41:29.849138

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import JSON
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e2447e5315c7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievement',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('district',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('is_group', sa.Boolean(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reward',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=True),
    sa.Column('is_market_available', sa.Boolean(), nullable=False),
    sa.Column('market_cost', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_reward',
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('reward_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['reward_id'], ['reward.id'], )
    )
    op.create_table('reward_achievement',
    sa.Column('reward_id', sa.Integer(), nullable=True),
    sa.Column('achievement_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], ),
    sa.ForeignKeyConstraint(['reward_id'], ['reward.id'], )
    )
    op.create_table('user',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=True),
    sa.Column('registered_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.Column('balance', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('district_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['district_id'], ['district.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receipts',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('carbon_print', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_achievement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('achieved_time', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_event',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('goal', sa.Float(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_reward',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('reward_id', sa.Integer(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('received_date', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.Column('activated_date', sa.DateTime(), nullable=True),
    sa.Column('is_bought', sa.Boolean(), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('achievement_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['reward_id'], ['reward.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('receipt_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('receipt_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('count', sa.Float(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    role_table = sa.table(
        'role',
        sa.Column('name', sa.String, nullable=False),
        sa.Column('permissions', JSON, nullable=True)
    )

    # Выполняем bulk insert
    op.bulk_insert(
        role_table,
        [
            {
                "name": "user",
                "permissions": {}  # Пустое JSON-значение для permissions
            },
            {
                "name": "admin",
                "permissions": {}  # Пустое JSON-значение для permissions
            }
        ]
    )
    EVENTS = [
        ("Отчистка берега", "Очистить {} кв. м. от пластика и других отходов."),
        ("Сортировка мусора", "Отсортировать {} кг мусора по контейнерам."),
        ("Сдать бутылки", "Сдать {} пластиковых бутылок."),
        ("Сдать батарейки", "Сдать {} батареек на специальный пункт."),
        ("Посетить семинар", "Посетить семинар, отсканировать QR-код и ответить на {} вопросов."),
    ]

    # Награды
    REWARDS = [
        {"id": 1, "title": "leaves", "file_path": None, "is_market_available": False, "market_cost": None},
        {"id": 2, "title": "xp", "file_path": None, "is_market_available": False, "market_cost": None},
        {"id": 3, "title": "cap", "file_path": None, "is_market_available": False, "market_cost": None},
        # Без привязки к событиям
        {"id": 4, "title": "t-shirt", "file_path": None, "is_market_available": False, "market_cost": None},
        {"id": 5, "title": "hoodie", "file_path": None, "is_market_available": False, "market_cost": None},
        {"id": 6, "title": "ticket", "file_path": None, "is_market_available": False, "market_cost": None},
    ]

    # Связи Event и Reward для уровней сложности
    EVENT_REWARDS = []
    op.bulk_insert(sa.table('reward',
                            sa.Column('id', sa.Integer),
                            sa.Column('title', sa.String),
                            sa.Column('file_path', sa.String),
                            sa.Column('is_market_available', sa.Boolean),
                            sa.Column('market_cost', sa.Float)),
                   REWARDS)

    # Добавляем события и связи event_reward
    event_counter = 1
    for event_name, description in EVENTS:
        # Легкое задание
        op.execute(
            sa.insert(sa.table('event',
                               sa.Column('id', sa.Integer),
                               sa.Column('description', sa.String),
                               sa.Column('amount', sa.Float),
                               sa.Column('file_path', sa.String, nullable=True),
                               sa.Column('is_group', sa.Boolean)))
            .values(id=event_counter, description=f"{description.format(10)}", amount=10, is_group=False)
        )
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 1, "amount": 10})  # leaves
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 2, "amount": 30})  # xp
        event_counter += 1

        # Среднее задание
        op.execute(
            sa.insert(sa.table('event',
                               sa.Column('id', sa.Integer),
                               sa.Column('description', sa.String),
                               sa.Column('amount', sa.Float),
                               sa.Column('file_path', sa.String),
                               sa.Column('is_group', sa.Boolean)))
            .values(id=event_counter, description=f"{description.format(20)}", amount=20, is_group=False)
        )
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 1, "amount": 20})  # leaves
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 2, "amount": 50})  # xp
        event_counter += 1

        # Сложное задание
        op.execute(
            sa.insert(sa.table('event',
                               sa.Column('id', sa.Integer),
                               sa.Column('description', sa.String),
                               sa.Column('amount', sa.Float),
                               sa.Column('file_path', sa.String),
                               sa.Column('is_group', sa.Boolean)))
            .values(id=event_counter, description=f"{description.format(50)}", amount=50, is_group=False)
        )
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 1, "amount": 30})  # leaves
        EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 2, "amount": 70})  # xp

        # Добавляем билет для некоторых сложных задач
        if event_name in ["Отчистка берега", "Сдать батарейки"]:
            EVENT_REWARDS.append({"event_id": event_counter, "reward_id": 6, "amount": 1})  # ticket

        event_counter += 1

    # Выполняем bulk insert для связи event_reward
    op.bulk_insert(sa.table('event_reward',
                            sa.Column('event_id', sa.Integer),
                            sa.Column('reward_id', sa.Integer),
                            sa.Column('amount', sa.Integer)),
                   EVENT_REWARDS)


def downgrade() -> None:

    op.drop_table('receipt_items')
    op.drop_table('user_reward')
    op.drop_table('user_event')
    op.drop_table('user_achievement')
    op.drop_table('receipts')
    op.drop_table('user')
    op.drop_table('reward_achievement')
    op.drop_table('event_reward')
    op.drop_table('role')
    op.drop_table('reward')
    op.drop_table('event')
    op.drop_table('district')
    op.drop_table('achievement')
    # ### end Alembic commands ###
